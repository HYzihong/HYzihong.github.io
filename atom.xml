<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hy</title>
  
  
  <link href="https://hyzihong.github.io/atom.xml" rel="self"/>
  
  <link href="https://hyzihong.github.io/"/>
  <updated>2020-09-19T16:20:37.169Z</updated>
  <id>https://hyzihong.github.io/</id>
  
  <author>
    <name>Hy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typescript</title>
    <link href="https://hyzihong.github.io/2020/09/19/Typescript-generic/"/>
    <id>https://hyzihong.github.io/2020/09/19/Typescript-generic/</id>
    <published>2020-09-19T15:26:47.000Z</published>
    <updated>2020-09-19T16:20:37.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typescript-泛型"><a href="#Typescript-泛型" class="headerlink" title="Typescript 泛型"></a>Typescript 泛型</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="在函数中使用泛型"><a href="#在函数中使用泛型" class="headerlink" title="在函数中使用泛型"></a>在函数中使用泛型</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">first: <span class="built_in">string</span> | <span class="built_in">number</span>, second: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 这里我们有一个需求 需要当first是string时second也得是string,当 first 是 number 时 second 也得是 number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">ABC</span>&gt;(<span class="params">first: ABC, second: ABC</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里不确定的类型我们定义为泛型 ABC</span></span><br><span class="line"><span class="comment">// 泛型ABC 定义为 number类型</span></span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">sum&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sum&lt;<span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有时候可以推断出泛型的类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>); <span class="comment">// 自动推断出 function sum&lt;number, string&gt;(first: number, second: string): string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值也可以是泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">T</span>, <span class="title">P</span>&gt;(<span class="params">first: T, second: P</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line">sum&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">sum&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sum(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><p>扩展</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的写法</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">ABC</span>&gt;(<span class="params">first: ABC[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">ABC</span>&gt;(<span class="params">first: <span class="built_in">Array</span>&lt;ABC&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>我们常用 T 代表泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T, second: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;second&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>&lt;<span class="title">T</span>&gt;(<span class="params">first: T[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first;</span><br><span class="line">&#125;</span><br><span class="line">sum&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h3 id="在类中使用泛型"><a href="#在类中使用泛型" class="headerlink" title="在类中使用泛型"></a>在类中使用泛型</h3><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例:"></a>案例:</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> DataManager &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: <span class="built_in">string</span>[] | <span class="built_in">number</span>[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): <span class="built_in">string</span> | <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([<span class="string">&quot;zhangsan&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果未来我们的data中存除了number和string以外的类型的数组呢</span></span><br><span class="line"><span class="comment">// 引入泛型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DataManager&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([<span class="string">&quot;zhangsan&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果让我们的data一定会包含name，也就是这个T类型中一定有name属性，那我们就要T类型包含Item所有属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Item &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> DataManager&lt;T <span class="keyword">extends</span> Item&gt; &#123;</span><br><span class="line">  <span class="comment">//T extends Item表示泛型T继TItem类型，泛型必须含有Item里面的属性</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index].name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager([&#123; name: <span class="string">&quot;&quot;</span> &#125;]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型在具体类型上做一定约束</span></span><br><span class="line"><span class="keyword">class</span> DataManager&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> data: T[]</span>) &#123;&#125;</span><br><span class="line">  getItem(index: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.data[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> DataManager&lt;<span class="built_in">number</span>&gt;([<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="用泛型声明一些类型"><a href="#用泛型声明一些类型" class="headerlink" title="用泛型声明一些类型"></a>用泛型声明一些类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用泛型做一个具体的类型注解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.普通的函数</span></span><br><span class="line"><span class="keyword">const</span> func: <span class="function">() =&gt;</span> <span class="built_in">string</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回值是string类型</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 进一步约束传入的参数</span></span><br><span class="line"><span class="comment">// 约束传入的类型是T</span></span><br><span class="line"><span class="keyword">const</span> func: &lt;T&gt;<span class="function">() =&gt;</span> <span class="built_in">string</span> = &lt;T&gt;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// （定义） &lt;T&gt;() =&gt; string 定义传入的T类型，返回是string</span></span><br><span class="line">  <span class="comment">// 实现 &lt;T&gt;() =&gt; &#123;  return &quot;&quot;; &#125;;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.定义实现分离，进一步约束类型定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">param: T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> param;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func: &lt;T&gt;<span class="function">(<span class="params">param: T</span>) =&gt;</span> T = hello;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typescript-泛型&quot;&gt;&lt;a href=&quot;#Typescript-泛型&quot; class=&quot;headerlink&quot; title=&quot;Typescript 泛型&quot;&gt;&lt;/a&gt;Typescript 泛型&lt;/h1&gt;&lt;h2 id=&quot;泛型&quot;&gt;&lt;a href=&quot;#泛型&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="https://hyzihong.github.io/2020/09/17/typescript/"/>
    <id>https://hyzihong.github.io/2020/09/17/typescript/</id>
    <published>2020-09-17T03:06:47.000Z</published>
    <updated>2020-09-17T03:08:20.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typescript基础"><a href="#Typescript基础" class="headerlink" title="Typescript基础"></a>Typescript基础</h1><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li><p>Typescript是JavaScript的超集，也就是在ES5、ES6的基础上再学习Typescript的新知识。</p></li><li><p>优势：</p><ul><li><ol><li>发现开发中的潜在问题</li></ol></li><li><ol start="2"><li>更友好的编辑器代码提示</li></ol></li><li><ol start="3"><li>代码语义更清晰易懂</li></ol></li></ul></li><li><p>静态类型的理解</p><ul><li>我们设置好类型后就会有相应的代码提示（属性、方法）</li><li>自定义类型也会有有相应的代码提示（属性、方法）</li></ul></li><li><p>基础类型：boolean , number , string , null , undefined , symbol , boolean , void</p></li><li><p>对象类型：对象{}，数组[]，类Class，函数function</p></li><li><p>类型注解（type annotation) ：我们声明ts变量是什么类型</p></li><li><p>类型推断（type inference）：ts会自行尝试分析推断变量的类型</p></li><li></li></ul><hr><p>类型注解和类型推断</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstNumber = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> secondNumber = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> sum = firstNumber + secondNumber;</span><br><span class="line"><span class="comment">// 这里可以直接推断出类型 let sum: number</span></span><br><span class="line"><span class="keyword">let</span> obj =&#123;</span><br><span class="line">    name:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    age:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里也可以推断出他的类型</span></span><br><span class="line"><span class="comment">// let obj: &#123;</span></span><br><span class="line"><span class="comment">//     name: string;</span></span><br><span class="line"><span class="comment">//     age: number;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当你的声明和赋值分开时也无法推断出变量的类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于一些内置函数是无法推断类型的</span></span><br><span class="line"><span class="keyword">interface</span> Pname &#123;</span><br><span class="line">  name: <span class="string">&quot;string&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个变量先是数字后是字符串，或者说可能是number也可能是string</span></span><br><span class="line"><span class="keyword">let</span> temp: <span class="built_in">number</span> | <span class="built_in">string</span> = <span class="number">123</span>;</span><br><span class="line">temp = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rowDate = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;xxx&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> newDate: Pname = <span class="built_in">JSON</span>.parse(rowDate);</span><br><span class="line"><span class="built_in">console</span>.log(newDate.name);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTotal</span>(<span class="params">thirdNumber, fourthNumber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> thirdNumber + fourthNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = getTotal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这里我们就无法推断出类型了 const total: any </span></span><br><span class="line"><span class="comment">// 我们就需要进行类型注解</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTotal</span>(<span class="params">thirdNumber: <span class="built_in">number</span>, fourthNumber: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> thirdNumber + fourthNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> total = getTotal(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 这里又可以直接推断出类型 const total: number</span></span><br></pre></td></tr></table></figure><p>注意：当类型推断无法分析出变量的类型，我们就需要使用类型注解</p><hr><p>函数相关类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义的方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> hello01  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> hello02 = <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 函数的形参（入参）是需要注解的，但是返回值可以推断不需要注解，</span></span><br><span class="line"><span class="comment">// 注解void表示没有返回值</span></span><br><span class="line"><span class="comment">// 注解never表示永远不会执行完</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数怎么注解解构赋值的呢</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: &#123; first: <span class="built_in">string</span>; second: <span class="built_in">string</span> &#125;</span>) : <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first &#125;: &#123; first: <span class="built_in">string</span> &#125;</span>) : <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(&#123; first: <span class="string">&quot;&quot;</span>, second: <span class="string">&quot;&quot;</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">interface</span> Oname &#123;</span><br><span class="line">   first: <span class="built_in">string</span>;</span><br><span class="line">   second: <span class="built_in">string</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; first, second &#125;: Oname</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> first + second;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(add(&#123; first: <span class="string">&quot;&quot;</span>, second: <span class="string">&quot;&quot;</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">const</span> func = (str: <span class="built_in">string</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//    2.</span></span><br><span class="line"><span class="keyword">const</span> func: <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="数组和元组"><a href="#数组和元组" class="headerlink" title="数组和元组"></a>数组和元组</h4><ul><li><p>数组的基本定义方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringArr: <span class="built_in">string</span>[] = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];<span class="comment">// string类型的数组</span></span><br><span class="line"><span class="keyword">const</span> arr: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="number">4</span>];<span class="comment">// 数组里面包含多种类型</span></span><br><span class="line"><span class="keyword">const</span> undefinedArr: <span class="literal">undefined</span>[] = [<span class="literal">undefined</span>, <span class="literal">undefined</span>];<span class="comment">//    undefined数组里面只能包含undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// type alias 类型别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> objArr: User[] = [&#123; name: <span class="string">&quot;zhangsan&quot;</span>, age: <span class="number">1</span> &#125;];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> User1 &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> classArr: User1[] = [</span><br><span class="line">  <span class="keyword">new</span> User1(),</span><br><span class="line">  &#123; name: <span class="string">&quot;zhangsan&quot;</span>, age: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="comment">//   &#123; name: &quot;lisi&quot;, age: 2, addr: &quot;blbl&quot; &#125;, 错误</span></span><br><span class="line">  <span class="comment">//   &#123; name: &quot;lisi&quot;&#125;, 错误</span></span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>元组基本使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组简单来讲就是数量个数有限的数组，每一项的类型的都是固定的</span></span><br><span class="line"><span class="keyword">const</span> TeacherInfo: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 用例：导出csv、excel文件的时候，我们的数据结构就是这样的，用元组去管理就比较合适</span></span><br><span class="line"><span class="keyword">const</span> TeacherInfoList: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>][] = [</span><br><span class="line">  [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="number">1</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a><em>interface</em></h4><ul><li>正常我们写函数(没有代码提示，没有限制person的具体定义)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(persion.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person</span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;<span class="comment">//无法知道这个name是哪里来的，入参缺少name也不会报错</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>进行类型注解</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person: &#123; name: <span class="built_in">string</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person: &#123; name: <span class="built_in">string</span> &#125;, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>进一步抽出来通用的类型的集合:     <code>person: &#123; name: string &#125;</code>  抽出来定义成*<code>interface</code>*</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person: Person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person: Person, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这里我们跟type（类型别名）进行区分一下<ul><li>type可以直接代表为一个基础类型</li></ul></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;<span class="comment">// interface只能代表一个对象或者函数,无法代表一个基础类型 </span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//type Person =  &#123;</span></span><br><span class="line"><span class="comment">//  name: string;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">type</span> Person1 = <span class="built_in">string</span> <span class="comment">// Person1可以直接代表一个string，这样一个基础类型</span></span><br><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person: Person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person: Person, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以在Typescript中有一个通用规范就是：<strong>如果可以用接口表述一些类型的话就用接口(interface)表述，实在不行再用类型别名去表述(type)</strong></p><ul><li>当我们需要接口对应的接口变量中，我们有一个xx（如：age）变量，我们有没有都可以，我们就需要这么写<strong>age?: number;</strong></li><li>当我们接口中的变量希望只读就需要设置成<strong>readonly name: string;</strong></li><li>设置未来可能会传递的更多的其他变量（属性），比如：这个属性未来的属性名是字符串类型，值是任何类型的,就需要写成 <strong>[propName: string]: any;</strong></li><li>当我们这个接口中必须要有一个方法时，我们在接口中定义它的名称和返回值，例：<strong>say(): string;</strong></li><li>如果我们有一个类(class)要应用接口(interface)，约束我们的类class</li><li>如果我们有一个接口(interface)需要继承我们的接口(interface)</li><li>接口也可以定义为一个函数，代表一个函数的约束</li><li>接口还可以定义为数组这种索引类型（没有例子）</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  <span class="comment">//   readonly name: string; 设置为只读的</span></span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 设置为不是必传的变量</span></span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;<span class="comment">//设置未知的属性的类型</span></span><br><span class="line">  say(): <span class="built_in">string</span>;<span class="comment">//当我们这个接口必须要有一个方法，返回值是string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getPersonName = <span class="function">(<span class="params">person: Person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setPersonName = <span class="function">(<span class="params">person: Person, name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  person.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  person = &#123;</span><br><span class="line">    name:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    sex:<span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    say() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">getPersonName(person)<span class="comment">// 引用自变量不会进行强校验</span></span><br><span class="line">getPersonName(&#123;</span><br><span class="line">    name:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    sex:<span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;)<span class="comment">// 会报错==》我们： 当我们以自变量的形式直接去传递的时候，Typescript会进行强校验</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们有一个类class要应用接口</span></span><br><span class="line"><span class="keyword">class</span> User <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  name: <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们有一个接口需要继承我们的接口</span></span><br><span class="line"><span class="keyword">interface</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  teacher(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getTeacherName = <span class="function">(<span class="params">person: Teacher</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = &#123;</span><br><span class="line">  name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  sex: <span class="string">&quot;boy&quot;</span>,</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  teacher() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getTeacherName(teacher);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口也可以定义为一个函数类型，代表一个函数</span></span><br><span class="line"><span class="keyword">interface</span> sayHello &#123;</span><br><span class="line">  (str: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> say: sayHello = <span class="function">(<span class="params">str: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> str + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><ul><li>关键字：public 、 private 、 protected<ul><li>public 表示允许在类的内外被调用（一般都默认是public）</li><li>private 只允许在类内调用</li><li>protected 只允许在类内及继承的子类内使用</li></ul></li><li>在new 我们定义的class时（实例化的瞬间），会自动调用constructor（构造器）方法<ul><li>使用constructor进行类的属性初始化赋值</li><li>子类声明构造器的时候，需要调用手动调用父类构造的方法</li></ul></li><li>我们可以使用readonly这个关键字使某些值定义为只读的</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本使用方法</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name = <span class="string">&quot;zhangsan&quot;</span>;<span class="comment">//这里千万不要写成name : &quot;zhangsan&quot;，但是可以写成name : string</span></span><br><span class="line">  age: <span class="number">18</span>;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.sayName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Teacher name is &quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.getTeacherName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写</span></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Teacher name is &quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;新 sayName&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写时候调用父类的方法</span></span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  getTeacherName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Teacher name is &quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.sayName() + <span class="string">&quot;是新的&quot;</span>; <span class="comment">//这个super代指父类Person,这里调用父类的方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.sayName());</span><br><span class="line"><span class="built_in">console</span>.log(person.getTeacherName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// public</span></span><br><span class="line"><span class="comment">// 不写默认都是public</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> age: <span class="number">18</span>;</span><br><span class="line">  <span class="keyword">public</span> sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">  age: <span class="number">18</span>;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  sayName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.sayName() + <span class="string">&quot;是新的&quot;</span>; <span class="comment">// 这里调用父类的sayName().sayName()中还是可以正常调用thsi.name的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.sayName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义一个name属性，再去构造器里面去赋值</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;<span class="comment">//这个name是外部传入的name,也就是new Person(&quot;zhangsan&quot;)时传入的&quot;zhangsan&quot;</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;<span class="comment">//this.name是类内部定义的属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">// 也可以这么写,简化写法</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="comment">//public name: string;</span></span><br><span class="line">  <span class="comment">//constructor(name: string) &#123;</span></span><br><span class="line">  <span class="comment">//  this.name = name;</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line">  <span class="comment">// 上面这个写法等价于下面这种</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继承时也要手动调用父类的构造函数super()</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(name); <span class="comment">//父类的构造方法,把name传入父类的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(teacher);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即使父类没有手动声明构造函数，也要手动去调用super()</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="built_in">super</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用readonly定义只读属性</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">// person.name = &#x27;lisi&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键字使用实例：</p><ol><li>对类内部的属性进行保护性输出,使用get和set</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span></span>) &#123;&#125; <span class="comment">// 加下划线表示私有的</span></span><br><span class="line"></span><br><span class="line">  set name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="comment">//   这里我们可以对传入的name进行处理</span></span><br><span class="line">    <span class="keyword">const</span> realName = name.split(<span class="string">&quot; &quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">this</span>._name = realName;</span><br><span class="line">  &#125;</span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="comment">//对_name进行一系列的加工（加密等处理）后暴露出去，防止被直接访问，确保_name的安全性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._name + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">person.name = <span class="string">&quot;zhangsan 222&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时我们就可以实现对_name属性的保护了</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// get 类内部的方法时不需要写成name()，直接name，</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>单例模式，我们这个类只能声明一次</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们可以把 constructor设置成私有的防止类被实例化</span></span><br><span class="line"><span class="comment">// class Person &#123;</span></span><br><span class="line"><span class="comment">//   private constructor() &#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const person = new Person();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: Person;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// static 表示把这个方法直接挂载到类上，而不是实例上   静态的属性和方法是放在类上的 </span></span><br><span class="line">  <span class="comment">//这里默认是public static getInstance()</span></span><br><span class="line">  <span class="keyword">static</span> getInstance(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="comment">// 返回我们的唯一实例</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.instance) &#123;</span><br><span class="line">      <span class="built_in">this</span>.instance = <span class="keyword">new</span> Person(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person1 = Person.getInstance(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> person2 = Person.getInstance(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1);<span class="comment">// Person &#123; name: &#x27;zhangsan&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2);<span class="comment">// Person &#123; name: &#x27;zhangsan&#x27; &#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>抽象类，抽象方法<ol><li>抽象类不能被实例化，只能被继承</li></ol></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Gemo &#123;</span><br><span class="line">  <span class="comment">//抽象类 ：把类相关的公用的东西抽离出来</span></span><br><span class="line">  width: <span class="built_in">string</span>; <span class="comment">//可以有具体的属性</span></span><br><span class="line">  getType() &#123;</span><br><span class="line">    <span class="comment">// 具体的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Gemo&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象方法</span></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Circle <span class="keyword">extends</span> Gemo &#123;</span><br><span class="line">  getArea() &#123;</span><br><span class="line">    <span class="comment">// 必须</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与接口对比</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Teacher <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  status: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  level: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> teacher = &#123;</span><br><span class="line">  name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  status: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">  name: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">  level: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> getUserInfo = <span class="function">(<span class="params">user: Person</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user.name);</span><br><span class="line">&#125;;</span><br><span class="line">getUserInfo(teacher);</span><br><span class="line">getUserInfo(student);</span><br></pre></td></tr></table></figure><hr><h4 id="interface和type还有class的区别（自己总结"><a href="#interface和type还有class的区别（自己总结" class="headerlink" title="interface和type还有class的区别（自己总结"></a><em>interface</em>和type还有class的区别（自己总结</h4><hr><h5 id="node配置"><a href="#node配置" class="headerlink" title="node配置"></a>node配置</h5><ul><li>全局安装typescript <code>npm i -g typescript</code></li><li>全局安装 ts-node <code>npm i ts-node -g</code></li></ul><h5 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h5><ul><li><p>安装插件</p><ul><li>Prettier - Code Formatter</li><li>设置自动格式化 设置中的Editor: Fromat On Save 勾选</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typescript基础&quot;&gt;&lt;a href=&quot;#Typescript基础&quot; class=&quot;headerlink&quot; title=&quot;Typescript基础&quot;&gt;&lt;/a&gt;Typescript基础&lt;/h1&gt;&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://hyzihong.github.io/2020/09/11/Docker/"/>
    <id>https://hyzihong.github.io/2020/09/11/Docker/</id>
    <published>2020-09-11T12:37:57.000Z</published>
    <updated>2020-09-11T12:59:55.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ul><li>虚拟机和容器的区别<br><img src="/image/WeChat9f8df0b7e8a171d8ea13d1c674f5e537.png" alt="虚拟机和容器的区别"></li><li>容器的用处<br><img src="/image/WeChat1a18231b49ad29f0608bc0861b191dac.png" alt="容器的用处"></li><li>DevOps<br><img src="/image/DFC6D04E-9D3F-4261-A7E4-AD3D95030EBC.png" alt="DevOps"></li><li>DevOps流程<br><img src="/image/WeChatb39e7da15f01b24759c0fe3f04cf253f.png" alt="WeChat1a18231b49ad29f0608bc0861b191dac"></li></ul><h3 id="容器技术和Docker简介"><a href="#容器技术和Docker简介" class="headerlink" title="容器技术和Docker简介"></a>容器技术和Docker简介</h3><ul><li>普通的项目部署<ul><li>部署非常慢</li><li>成本非常高</li><li>资源浪费</li><li>难于迁移和扩展</li><li>可能会被厂商限定硬件配置</li></ul></li><li>虚拟化技术<ul><li>一个物理机可以部署多个APP</li><li>每个APP独立运行在一个VM</li></ul></li><li>虚拟化的优点<ul><li>资源池——一个物理机的资源分配到了不同的虚拟机中</li><li>很容易扩展——加物理机器or加虚拟机</li><li>很容易云化——亚马逊AWS，阿里云等</li></ul></li><li>虚拟化的局限性<ul><li>每一个虚拟机都是一个完整的操作系统，要给其分配资源，当虚拟机数量增多时，操作系统本身消耗的资源势必增多</li></ul></li><li>容器<ul><li>容器解决了什么问题？<ul><li>解决了开发和运维之间的矛盾</li><li>在开发和运维之间搭建了一个桥梁，是实现devops的最佳解决方案</li></ul></li><li>什么是容器？<ul><li>对软件和其依赖的标准哈打包</li></ul></li><li>应用之间的相互隔离<ul><li>共享同一个OS Kernel</li><li>可以运行在很多主流操作系统上<br><img src="/Users/hy/Documents/img/WeChatbf83178f82249a38763776e1f523bfbc.png" alt="WeChatbf83178f82249a38763776e1f523bfbc"></li></ul></li></ul></li></ul><p><img src="/Users/hy/Documents/img/2C34AE90-917C-46F1-8C85-33F93683B479.png" alt="2C34AE90-917C-46F1-8C85-33F93683B479"></p><p><img src="/Users/hy/Documents/img/WeChatc68598ef9f5e8c7362a23bad9d2be661.png" alt="WeChatc68598ef9f5e8c7362a23bad9d2be661"></p><p><img src="/Users/hy/Documents/img/WeChatf63daa52e9d6cb368145f3b16c759f25.png" alt="WeChatf63daa52e9d6cb368145f3b16c759f25"></p><hr><h3 id="Docker环境的各种搭建方法"><a href="#Docker环境的各种搭建方法" class="headerlink" title="Docker环境的各种搭建方法"></a>Docker环境的各种搭建方法</h3><ul><li><p>mac/windows下安装</p></li><li><p>centos7下安装Docker</p></li><li><p>vagrant + virtualBox搭建（推荐！！！！）</p></li><li><p><a href="https://labs.play-with-docker.com/">Docker-playground测试环境</a></p></li><li><p>docker-machine搭建</p></li><li><p>aws的ECS（亚马逊）/阿里云的云搭建 </p></li><li><p>Docker的镜像和容器</p><ul><li><p>Docker的架构和底层技术</p></li><li><p>Docker Platform</p><ul><li>Docker提供了一个开发，打包，运行app的平台</li><li>把app和底层infrastructure隔离开来</li><li><img src="/Users/hy/Documents/img/D53F4363-647A-403C-A302-11B69CCD5C9C.png" alt="D53F4363-647A-403C-A302-11B69CCD5C9C" style="zoom:50%;" /></li></ul></li><li><p>Docker Engine</p><ul><li><p>后台进程（dockerd）</p></li><li><p>REST API Server</p></li><li><p>CLI接口（docker）</p></li><li><img src="/Users/hy/Documents/img/1C6CFBDC-A74B-4448-BC59-E9E6531728D0.png" alt="1C6CFBDC-A74B-4448-BC59-E9E6531728D0" style="zoom:50%;" /></li><li><p>进入vagrant centos7 ssh中</p></li><li><pre><code class="shell">[vagrant@localhost ~]$ sudo docker versionClient: Docker Engine - Community Version:           19.03.12 API version:       1.40 Go version:        go1.13.10 Git commit:        48a66213fe Built:             Mon Jun 22 15:46:54 2020 OS/Arch:           linux/amd64 Experimental:      falseServer: Docker Engine - Community Engine:  Version:          19.03.12  API version:      1.40 (minimum version 1.12)  Go version:       go1.13.10  Git commit:       48a66213fe  Built:            Mon Jun 22 15:45:28 2020  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.2.13  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429 runc:  Version:          1.0.0-rc10  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd docker-init:  Version:          0.18.0  GitCommit:        fec3683[vagrant@localhost ~]$ ps -ef | grep docker# 查看后台docker和dockerd的进程root      1688     1  0 12:17 ?        00:00:00 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockvagrant   1870  1613  0 12:18 pts/0    00:00:00 grep --color=auto docker&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - Docker Architecture&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;img src&amp;#x3D;&amp;quot;&amp;#x2F;Users&amp;#x2F;hy&amp;#x2F;Documents&amp;#x2F;img&amp;#x2F;D63FD63A-326B-44EF-9846-CE7067049584.png&amp;quot; alt&amp;#x3D;&amp;quot;D63FD63A-326B-44EF-9846-CE7067049584&amp;quot; style&amp;#x3D;&amp;quot;zoom:50%;&amp;quot; &amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Docker底层技术支持&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- NameSpace:做隔离pid，net，ipc，mnt，uts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Control groups：做资源限制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Union file ：Container 和image的分层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### Docker Image（镜像）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- image 是文件和meta data的集合（root filesysteam）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;gt; Linux系统分用户空间（Linux的各种发行版 都是基于base Image的）和内核空间Linux Kernel（bootfs）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- image是分层的，并且每一层都可以添加改变删除文件，成为一个新的image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- image本事是read-only的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;img src&amp;#x3D;&amp;quot;&amp;#x2F;Users&amp;#x2F;hy&amp;#x2F;Documents&amp;#x2F;img&amp;#x2F;45AEA174-4E2C-4524-995D-B79746B401BA.png&amp;quot; alt&amp;#x3D;&amp;quot;45AEA174-4E2C-4524-995D-B79746B401BA&amp;quot; style&amp;#x3D;&amp;quot;zoom:50%;&amp;quot; &amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;sudo docker image ls&amp;#96;查看本地已有的docker image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 获取Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Build from Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- Pull from Registry(Docker Hub提供的Registry 类似于github ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;sudo docker pull xxx&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;gt; shell中去掉sudo关键字:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 1. &amp;#96;sudo groupadd docker&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 2. 把当前用户添加到这个docker group里面&amp;#96;sudo gpasswd -a vagrant docker&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 3. 重启docker服务&amp;#96;sudo service docker restart&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;gt; 4. 重新登录shell即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 创建一个简单的Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 先安装gcc vim glibc-static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ history | grep yum $ 历史的yum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sudo yum install vim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sudo yum install gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sudo yum install glibc-static&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 创建一个hello的可执行文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ mkdir hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ cd hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ vim hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            #include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    printf(&amp;quot;hello docker\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ gcc -static hello.c -o hello# 生成一个可执行文件 .&amp;#x2F;hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 创建Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ vim Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            FROM scratch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ADD hello &amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CMD [&amp;quot;&amp;#x2F;hello&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # build 出Image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sudo docker build -t yi&amp;#x2F;hello-world . # -t 指定一个tag 这里我们指定为 yi&amp;#x2F;hello-world   这里 . 代表在当前目录下找Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Sending build context to Docker daemon  864.8kB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Step 1&amp;#x2F;3 : FROM scratch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             ---&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Step 2&amp;#x2F;3 : ADD hello &amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             ---&amp;gt; fa239409445e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Step 3&amp;#x2F;3 : CMD [&amp;quot;&amp;#x2F;hello&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             ---&amp;gt; Running in 0d68039cba6d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Removing intermediate container 0d68039cba6d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             ---&amp;gt; e75b5dce92a4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Successfully built e75b5dce92a4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Successfully tagged yi&amp;#x2F;hello-world:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ sudo docker image ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            yi&amp;#x2F;hello-world      latest              e75b5dce92a4        10 minutes ago      861kB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hello-world         latest              bf756fb1ae65        8 months ago        13.3kB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 查看.&amp;#x2F;hello文件的大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ ls -lh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            total 852K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -rw-rw-r--. 1 vagrant vagrant   40 Sep  9 14:18 Dockerfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -rwxrwxr-x. 1 vagrant vagrant 841K Sep  9 14:00 hello # 说明这个Image就存放一个这个二进制可执行文件，完后通过共享的Linux Kernel来运行这个可执行文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            -rw-rw-r--. 1 vagrant vagrant   61 Sep  9 14:00 hello.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 查看一下Image的分层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ sudo docker history e75b5dce92a4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e75b5dce92a4        13 minutes ago      &amp;#x2F;bin&amp;#x2F;sh -c #(nop)  CMD [&amp;quot;&amp;#x2F;hello&amp;quot;]               0B    运行了一个命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fa239409445e        13 minutes ago      &amp;#x2F;bin&amp;#x2F;sh -c #(nop) ADD file:66da5a4c1638e8d84…   861kB    添加了一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 有两层，FROM scratch不算一层，它仅代表我们没有任何FROM，没有任何base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            # 运行Image变成Container ,执行这个Container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ sudo docker run yi&amp;#x2F;hello-world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hello docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul></li></ul><h3 id="Container（容器）"><a href="#Container（容器）" class="headerlink" title="Container（容器）"></a>Container（容器）</h3><ul><li>Container是用过Image创建（copy）</li><li>在Image layer 之上建立一个container layer （可读写）</li><li>类比面向对象：类与实例</li><li>Image负责app的存储和分发，Container负责运行app</li></ul><p><img src="/Users/hy/Documents/img/50338D95-D71D-47B6-9361-A239279760E3.png" alt="50338D95-D71D-47B6-9361-A239279760E3"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> [vagrant@localhost ~]$ sudo docker run yi/hello-world</span><br><span class="line">            hello docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取当前本地正在运行的docker 容器</span></span><br><span class="line">[vagrant@localhost ~]$ sudo docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为我们的yi/hello-world运行完 hello docker 就退出了，不是常驻内存的进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取当前本地所有的docker 容器</span></span><br><span class="line">[vagrant@localhost ~]$ sudo docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES</span><br><span class="line">09bfcb7463a3        yi/hello-world      &quot;/hello&quot;            25 minutes ago      Exited (13) 25 minutes ago                         sweet_kapitsa</span><br><span class="line">e83c022a26d5        yi/hello-world      &quot;/hello&quot;            44 minutes ago      Exited (13) 44 minutes ago                         kind_brattain</span><br><span class="line">b0c8e0daea2d        hello-world         &quot;/hello&quot;            About an hour ago   Exited (0) About an hour ago                       musing_maxwell</span><br><span class="line">40d3e81a5786        hello-world         &quot;/hello&quot;            26 hours ago        Exited (0) 26 hours ago                            modest_keldysh</span><br><span class="line">[vagrant@localhost ~]$ cd hello-world</span><br><span class="line">[vagrant@localhost hello-world]$ more Dockerfile</span><br><span class="line">FROM scratch</span><br><span class="line">ADD hello /</span><br><span class="line">CMD [&quot;/hello&quot;] # 运行可执行文件 /hello ，执行完就结束，不常驻内存</span><br><span class="line"><span class="meta">#</span><span class="bash"> 交互式运行container</span></span><br><span class="line"> [vagrant@localhost ~]$ sudo docker run centos# 完后就会进入这个container里面，也会出现在正在运行的container列表中，当exit退出后会停止运行退出</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>docker 命令列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">[vagrant@localhost hello-world]$ docker -h</span><br><span class="line">Flag shorthand -h has been deprecated, please use --help</span><br><span class="line"></span><br><span class="line">Usage:    docker [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime for containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default &quot;/home/vagrant/.docker&quot;)</span><br><span class="line">  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and</span><br><span class="line">                           default context set with &quot;docker context use&quot;)</span><br><span class="line">  -D, --debug              Enable debug mode</span><br><span class="line">  -H, --host list          Daemon socket(s) to connect to</span><br><span class="line">  -l, --log-level string   Set the logging level (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)</span><br><span class="line">      --tls                Use TLS; implied by --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only by this CA (default &quot;/home/vagrant/.docker/ca.pem&quot;)</span><br><span class="line">      --tlscert string     Path to TLS certificate file (default &quot;/home/vagrant/.docker/cert.pem&quot;)</span><br><span class="line">      --tlskey string      Path to TLS key file (default &quot;/home/vagrant/.docker/key.pem&quot;)</span><br><span class="line">      --tlsverify          Use TLS and verify the remote</span><br><span class="line">  -v, --version            Print version information and quit</span><br><span class="line"></span><br><span class="line">Management Commands: # docker 一些对象的管理</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  context     Manage contexts</span><br><span class="line">  engine      Manage the docker engine</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  plugin      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  stack       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust on Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:# 进行快速操作</span><br><span class="line"> attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container&#x27;s changes</span><br><span class="line">  cp          Copy files/folders between a container and the local filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  deploy      Deploy a new stack or update an existing stack</span><br><span class="line">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        Run a command in a running container</span><br><span class="line">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class="line">  history     Show the history of an image</span><br><span class="line">  images      List images</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  info        Display system-wide information</span><br><span class="line">  inspect     Return low-level information on Docker objects</span><br><span class="line">  kill        Kill one or more running containers</span><br><span class="line">  load        Load an image from a tar archive or STDIN</span><br><span class="line">  login       Log in to a Docker registry</span><br><span class="line">  logout      Log out from a Docker registry</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  pause       Pause all processes within one or more containers</span><br><span class="line">  port        List port mappings or a specific mapping for the container</span><br><span class="line">  ps          List containers</span><br><span class="line">  pull        Pull an image or a repository from a registry</span><br><span class="line">  push        Push an image or a repository to a registry</span><br><span class="line">  rename      Rename a container</span><br><span class="line">  restart     Restart one or more containers</span><br><span class="line">  rm          Remove one or more containers</span><br><span class="line">  rmi         Remove one or more images</span><br><span class="line">  run         Run a command in a new container</span><br><span class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">  search      Search the Docker Hub for images</span><br><span class="line">  start       Start one or more stopped containers</span><br><span class="line">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop one or more running containers</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">  top         Display the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within one or more containers</span><br><span class="line">  update      Update configuration of one or more containers</span><br><span class="line">  version     Show the Docker version information</span><br><span class="line">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class="line"></span><br><span class="line">Run &#x27;docker COMMAND --help&#x27; for more information on a command.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Image的命令</span></span><br><span class="line">[vagrant@localhost hello-world]docker image</span><br><span class="line"></span><br><span class="line">Usage:    docker image COMMAND</span><br><span class="line"></span><br><span class="line">Manage images</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build       Build an image from a Dockerfile</span><br><span class="line">  history     Show the history of an image</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  inspect     Display detailed information on one or more images</span><br><span class="line">  load        Load an image from a tar archive or STDIN</span><br><span class="line">  ls          List images</span><br><span class="line">  prune       Remove unused images</span><br><span class="line">  pull        Pull an image or a repository from a registry</span><br><span class="line">  push        Push an image or a repository to a registry</span><br><span class="line">  rm          Remove one or more images</span><br><span class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line"></span><br><span class="line">Run &#x27;docker image COMMAND --help&#x27; for more information on a command.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Container的命令</span></span><br><span class="line">[vagrant@localhost hello-world]$ docker container</span><br><span class="line"></span><br><span class="line">Usage:    docker container COMMAND</span><br><span class="line"></span><br><span class="line">Manage containers</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach local standard input, output, and error streams to a running container</span><br><span class="line">  commit      Create a new image from a container&#x27;s changes</span><br><span class="line">  cp          Copy files/folders between a container and the local filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        Inspect changes to files or directories on a container&#x27;s filesystem</span><br><span class="line">  exec        Run a command in a running container</span><br><span class="line">  export      Export a container&#x27;s filesystem as a tar archive</span><br><span class="line">  inspect     Display detailed information on one or more containers</span><br><span class="line">  kill        Kill one or more running containers</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  ls          List containers</span><br><span class="line">  pause       Pause all processes within one or more containers</span><br><span class="line">  port        List port mappings or a specific mapping for the container</span><br><span class="line">  prune       Remove all stopped containers</span><br><span class="line">  rename      Rename a container</span><br><span class="line">  restart     Restart one or more containers</span><br><span class="line">  rm          Remove one or more containers</span><br><span class="line">  run         Run a command in a new container</span><br><span class="line">  start       Start one or more stopped containers</span><br><span class="line">  stats       Display a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop one or more running containers</span><br><span class="line">  top         Display the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within one or more containers</span><br><span class="line">  update      Update configuration of one or more containers</span><br><span class="line">  wait        Block until one or more containers stop, then print their exit codes</span><br><span class="line"></span><br><span class="line">Run &#x27;docker container COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><hr><ul><li>Docker的网络（单机网络、多级网络）</li><li>Docker的持久化存储和数据共享</li><li>Docker Compose多容器部署</li><li>容器编排Docker Swarm</li><li>DevOps初体验——Docker Cloud 和 Docker 企业版</li><li>容器编排Kubernetes</li><li>容器的运维和监控</li><li>Docker+DevOps实战——过程和工具</li><li>总结</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;h2 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Javascript  基础</title>
    <link href="https://hyzihong.github.io/2020/08/13/Javascript-%E5%9F%BA%E7%A1%80/"/>
    <id>https://hyzihong.github.io/2020/08/13/Javascript-%E5%9F%BA%E7%A1%80/</id>
    <published>2020-08-13T06:51:40.000Z</published>
    <updated>2020-09-10T06:45:29.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-基础知识"><a href="#JavaScript-基础知识" class="headerlink" title="JavaScript 基础知识"></a>JavaScript 基础知识</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><h5 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h5><ul><li>基本语法</li><li>语句</li><li>对象</li><li>函数</li></ul><h5 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h5><h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h5><h5 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h5><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><h5 id="最新语法"><a href="#最新语法" class="headerlink" title="最新语法"></a>最新语法</h5><hr><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul><li><p>变量</p><ul><li>变量声明</li><li>变量作用域</li><li>全局变量</li></ul></li><li><p>类型</p><ul><li>基本类型</li><li>引用类型</li><li>判断类型的方法</li><li>类型转换<ul><li>显式转换</li><li>隐式转换</li></ul></li></ul></li><li><p>运算符</p><ul><li>分类</li><li>优先级</li></ul></li></ul><hr><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ol><li><p>变量声明</p><ul><li><p>var 有变量提升，可以跨块访问，不能跨函数访问</p></li><li><p>let 只能在块级作用域访问，不存在变量提升，存在暂时性死区，不允许重复声明</p></li><li><p>const 只能在块级作用域访问，用于定义常量,不存在变量提升,必须初始化（赋值），声明的值不会改变（内存地址不会改变），存在暂时性死区</p><blockquote><p>补充：对象不可变则使用 <code>Object.freeze()</code> 方法</p></blockquote></li></ul></li><li><p>变量作用域</p><ul><li><p>函数作用域</p></li><li><p>全局作用域</p></li><li><p>块级作用域</p></li></ul></li><li><p>全局变量</p><ul><li>window</li></ul></li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5><ol><li><p>基本类型</p><ul><li>number 2^64 - 2^53 + 3个值(正无穷（Infinity）、负无穷（-Infinity）、NaN（非数字值的特殊值为NaN值，任意两个NaN不相等）)</li><li>string 最大长度是2^53 - 1</li><li>boolean</li><li>null 语义表示空值（定义了但是为空）</li><li>undefined 表示未定义，类型只有一个值<blockquote><p>1.null表示“没有对象”，即该处不应该有值。典型用法是：<br>  1）作为函数的参数，表示该函数的参数不是对象<br>  2）作为对象原型链的终点<br>2.undefined表示“缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：<br>  1）变量被声明了，但没有赋值时，就等于undefined<br>  2）调用函数时，应该提供的参数没有提供，该参数等于undefined<br>  3）对象没有赋值的属性，该属性的值为undefined<br>  4）函数没有返回值时，默认返回undefined</p></blockquote></li></ul></li></ol><p>转换为数字是，null转换为0，undefined转换为NaN<br>    - Symbol ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>        &gt; 1.特点<br>        &gt;（1）Symbol可以具有字符串类型的描述，即使描述相同，Symbol也不相等。<br>        &gt;（2）Symbol作为属性名，该属性不会出现在for……in、for……of循环中，也不会被Object.keys()、Object.getOwnPropertyNames（）返回。有一个Object.getOwnPropertySymbols方法可以获取到。<br>        &gt;2.使用<br>        &gt;var mySymbol = Symbol(“my symbol”);// 即使key一样，产生的也不同<br>        &gt;var s1 = Symbol.for(‘foo’);// 不会每次调用时都返回一个新的Symbol类型的值，而是会首先检查给定的key是否已经存在，如果不存在才会新建一个值。<br>        &gt;Symbol.keyFor(s1);// 返回一个已登记Symbol类型值的key。</p><p>利用typeof进行检测，但null是特例，会返回Object，这是因为js在底层存储变量的时候会在变量的机器码的低位1-3位存储其类型信息（000：对象；010：浮点数；100：字符串；110：布尔；1：整数；但是存在两个特殊的：null所有机器码均为0；undefined：用 −2^30 整数来表示），所以null返回Object</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-基础知识&quot;&gt;&lt;a href=&quot;#JavaScript-基础知识&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础知识&quot;&gt;&lt;/a&gt;JavaScript 基础知识&lt;/h1&gt;&lt;h2 id=&quot;基本结构&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Javascript 面试题基础</title>
    <link href="https://hyzihong.github.io/2020/08/12/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9F%BA%E7%A1%80/"/>
    <id>https://hyzihong.github.io/2020/08/12/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9F%BA%E7%A1%80/</id>
    <published>2020-08-12T08:37:06.000Z</published>
    <updated>2020-08-13T07:02:54.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js面试题-基础部分"><a href="#js面试题-基础部分" class="headerlink" title="js面试题_基础部分"></a>js面试题_基础部分</h1><h5 id="JS中使用-typeof-能得到的哪些类型-？"><a href="#JS中使用-typeof-能得到的哪些类型-？" class="headerlink" title="JS中使用 typeof 能得到的哪些类型   ？"></a>JS中使用 <code>typeof</code> 能得到的哪些类型   ？</h5><ul><li>答：function、string、object、number</li></ul><hr><h5 id="何时使用-，何时使用"><a href="#何时使用-，何时使用" class="headerlink" title="何时使用==，何时使用 ===  ?"></a>何时使用<code>==</code>，何时使用 <code>===</code>  ?</h5><ul><li>答：</li></ul><hr><h5 id="JS中有哪些内置函数"><a href="#JS中有哪些内置函数" class="headerlink" title="JS中有哪些内置函数"></a>JS中有哪些内置函数</h5><ul><li>答：</li></ul><hr><h5 id="JS变量按照存储方式区分为哪些类型，并描述其特点"><a href="#JS变量按照存储方式区分为哪些类型，并描述其特点" class="headerlink" title="JS变量按照存储方式区分为哪些类型，并描述其特点"></a>JS变量按照存储方式区分为哪些类型，并描述其特点</h5><ul><li>答：</li></ul><hr><h5 id="如何理解JSON"><a href="#如何理解JSON" class="headerlink" title="如何理解JSON"></a>如何理解JSON</h5><ul><li>答：</li></ul><hr><h5 id="window-onload-和-DOMContentLoaded-的区别-？"><a href="#window-onload-和-DOMContentLoaded-的区别-？" class="headerlink" title="window.onload 和 DOMContentLoaded 的区别 ？"></a><code>window.onload</code> 和 <code>DOMContentLoaded</code> 的区别 ？</h5><ul><li>答：</li></ul><hr><h5 id="用JS创建10个-lt-a-gt-标签，点击的时候弹出对应的序号。"><a href="#用JS创建10个-lt-a-gt-标签，点击的时候弹出对应的序号。" class="headerlink" title="用JS创建10个&lt;a&gt;标签，点击的时候弹出对应的序号。"></a>用JS创建10个<code>&lt;a&gt;</code>标签，点击的时候弹出对应的序号。</h5><ul><li>答：</li></ul><hr><h5 id="简述如何实现一个模块加载器，实现类似require-js的基本功能"><a href="#简述如何实现一个模块加载器，实现类似require-js的基本功能" class="headerlink" title="简述如何实现一个模块加载器，实现类似require.js的基本功能"></a>简述如何实现一个<strong>模块加载器</strong>，实现类似<code>require.js</code>的基本功能</h5><hr><h5 id="实现数组的随机排序"><a href="#实现数组的随机排序" class="headerlink" title="实现数组的随机排序"></a>实现数组的随机排序</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;js面试题-基础部分&quot;&gt;&lt;a href=&quot;#js面试题-基础部分&quot; class=&quot;headerlink&quot; title=&quot;js面试题_基础部分&quot;&gt;&lt;/a&gt;js面试题_基础部分&lt;/h1&gt;&lt;h5 id=&quot;JS中使用-typeof-能得到的哪些类型-？&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hyzihong.github.io/2020/08/12/hello-world/"/>
    <id>https://hyzihong.github.io/2020/08/12/hello-world/</id>
    <published>2020-08-12T08:28:48.426Z</published>
    <updated>2020-08-12T08:28:48.426Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
